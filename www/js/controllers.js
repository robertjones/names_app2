// Generated by CoffeeScript 1.9.0
(function() {
  angular.module('starter.controllers', []).controller('AppCtrl', function($scope, $ionicPopup, $location, $ionicHistory, Game, NameLists) {
    $scope.numListsSelected = function() {
      var list;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = NameLists.length; _i < _len; _i++) {
          list = NameLists[_i];
          if (list.selected) {
            _results.push(null);
          }
        }
        return _results;
      })()).length;
    };
    return $scope.newGame = function() {
      if ($scope.numListsSelected() < 1) {
        $ionicHistory.nextViewOptions({
          disableAnimate: true,
          disableBack: true
        });
        $location.path('/app/namelists');
        return $ionicPopup.alert({
          title: 'Select names lists',
          template: 'You need to select one or more name lists before you can start a new game.',
          okType: 'button-stable',
          okText: 'OK'
        });
      } else {
        return $ionicPopup.confirm({
          title: 'End current game?',
          template: 'Are you sure you want to end the current game?',
          cancelText: 'No, play on',
          okType: 'button-assertive',
          okText: 'End game'
        }).then(function(res) {
          if (res) {
            $ionicHistory.nextViewOptions({
              disableAnimate: true,
              disableBack: true
            });
            $location.path('/app/game');
            return Game.newGame();
          }
        });
      }
    };
  }).controller('GameCtrl', function($scope, $interval, $ionicPopup, $location, $ionicHistory, Game) {
    var counter, gameOverAlert, goLength, maxSkips, newGameAlert, popupOn, resetTimer, roundAlert, startTimer, stopTimer, timeRemaining, timer, timerOn, turnEndAlert, turnStartAlert;
    $scope.currentCard = Game.currentCard;
    $scope.skip = Game.skip;
    $scope.foul = Game.foul;
    $scope.got = Game.got;
    $scope.currentTeam = Game.currentTeam;
    $scope.currentRound = Game.currentRound;
    maxSkips = 2;
    popupOn = false;
    $scope.unSkippable = function() {
      return Game.skips >= maxSkips;
    };
    roundAlert = function() {
      stopTimer();
      return $ionicPopup.alert({
        title: Game.currentRound(),
        template: 'Your go continues with a new round.',
        okText: 'Continue'
      }).then(startTimer);
    };
    Game.roundAlert = roundAlert;
    turnEndAlert = function() {
      stopTimer();
      return $ionicPopup.alert({
        title: 'Time\'s up',
        template: (Game.currentTeam().name) + " Team, your turn is over.<br />\nYou got " + Game.turnPoints + " points this turn.<br />\nScores: " + (Game.scoreStr()) + ".",
        okText: 'OK',
        okType: 'button-energized'
      }).then(turnStartAlert);
    };
    Game.turnEndAlert = turnEndAlert;
    turnStartAlert = function() {
      Game.teamSwitch();
      return $ionicPopup.alert({
        title: (Game.currentTeam().name) + " Team, it's your turn",
        template: "It's " + (Game.currentRound()) + ".<br />\nScores: " + (Game.scoreStr()) + ".",
        okText: 'Start turn',
        okType: 'button-balanced'
      }).then(startTimer);
    };
    Game.turnStartAlert = turnStartAlert;
    gameOverAlert = function() {
      stopTimer();
      return $ionicPopup.alert({
        title: 'Game over',
        template: "Scores: " + (Game.scoreStr()) + ".",
        okText: 'Start new game',
        okType: 'button-assertive'
      }).then(function() {
        return Game.newGame();
      });
    };
    Game.gameOverAlert = gameOverAlert;
    newGameAlert = function() {
      stopTimer();
      popupOn = true;
      return $ionicPopup.alert({
        title: 'Get ready',
        template: "<p>Get your teammates to guess as many famous figures and characters as you can before the time runs out; without saying any part of the name shown, or rhyming.</p>\n<p>Once all the names are guessed, a new round begins and you're limited to three, then one, then no words.</p>\n<p>You get two skips per go and you'll need to split into two teams (Green and Blue).</p>\n" + (Game.currentTeam().name) + "'s up - it's " + (Game.currentRound()) + ".",
        okText: 'Start game',
        okType: 'button-balanced'
      }).then(function() {
        popupOn = false;
        return startTimer();
      });
    };
    Game.newGameAlert = newGameAlert;
    goLength = 60;
    timeRemaining = goLength * 10;
    timerOn = false;
    timer = function() {
      if (timerOn) {
        timeRemaining -= 1;
        if (timeRemaining <= 0) {
          timeRemaining = goLength * 10;
          return Game.nextTeam();
        }
      }
    };
    counter = {};
    resetTimer = function() {
      return timeRemaining = goLength * 10;
    };
    Game.resetTimer = resetTimer;
    startTimer = function() {
      timerOn = true;
      return $scope.displayName = true;
    };
    stopTimer = function() {
      timerOn = false;
      return $scope.displayName = false;
    };
    $scope.timePercent = function() {
      return timeRemaining / goLength / 10 * 100;
    };
    $interval(timer, 100);
    $scope.$on('$ionicView.enter', function() {
      if (!popupOn) {
        return startTimer();
      }
    });
    $scope.$on('$ionicView.leave', stopTimer);
    return Game.newGame();
  }).controller('NameListsCtrl', function($scope, Game, NameLists) {
    return $scope.namelists = NameLists;
  });

}).call(this);
